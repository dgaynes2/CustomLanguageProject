from Lexer import Lexer
import Tokens
import Errors
import math

# Global dictionary to store variable assignments
VARIABLES = {}

class Parser:
    CONSTANTS = {
        'PI':math.pi,
        'E':math.e,
    }

    def __init__(self, tokens):
        self.tokens = tokens
        self.index = -1
        self.current_token = None
        self.next()

    def next(self):
        self.index += 1
        self.current_token = self.tokens[self.index] if self.index < len(self.tokens) else None

    def apply_operation(self, result, op, operand):
        # Apply binary operations based on the given operator
        if op == 'ADD':
            return result + operand
        elif op == 'SUB':
            return result - operand
        elif op == 'MUL':
            return result * operand
        elif op == 'DIV' and operand != 0:
            return result / operand
        elif op == 'FLD' and operand != 0:
            return result // operand
        elif op == 'MOD' and operand != 0:
            return result % operand
        else:
            return f'Error: Invalid operation {op}'

    def parse(self):
        return self.parse_var()

    def handle_var_assignment(self, variable_name):
        # Handle variable assignment, e.g., VAR IS expression
        self.next()  # Move past 'IS'
        self.next()
        value = self.parse_expression()
        VARIABLES[variable_name] = value
        # self.next()  # Move past the assignment value
        return f'Assigned: {variable_name} = {value}'

    def get_variable_value(self,variable_name):
        # Retrieve the value of a variable from the global dictionary
        if variable_name in VARIABLES:
            return VARIABLES[variable_name]
        else:
            return f'Variable "{variable_name}" unassigned'

    def parse_var(self):
        # Parse variable, check for assignment or use existing value
        if self.current_token and self.current_token.type == 'VAR':
            variable_name = self.current_token.name
            if (
                len(self.tokens) > 1
                and self.index + 1 < len(self.tokens)
                and self.tokens[self.index + 1].type == "IS"
            ):
                return self.handle_var_assignment(variable_name)
            else:
                value = self.get_variable_value(variable_name)
                if value is not None:
                    return value
                else:
                    return f'Error: variable "{variable_name}" not found'
        return self.parse_expression()

    def parse_expression(self):
        # Parse addition and subtraction
        result = self.parse_term()

        while self.current_token and self.current_token.type in ['ADD', 'SUB']:
            if self.current_token.type == 'ADD':
                self.next()
                result += self.parse_term()
            elif self.current_token.type == 'SUB':
                self.next()
                result -= self.parse_term()
        return result

    def parse_term(self):
        # Parse multiplication, division, floor division, and modulo
        result = self.parse_exponent()

        while self.current_token and self.current_token.type in {'MUL', 'DIV', 'FLD', 'MOD'}:
            op = self.current_token.type
            self.next()
            operand = self.parse_exponent()
            result = self.apply_operation(result, op, operand)

        return result

    def parse_exponent(self):
        # Parse exponentiation
        result = self.parse_factor()

        while self.current_token and self.current_token.type == 'POW':
            self.next()
            result **= self.parse_factor()

        return result

    def handle_mono_token(self, mono_type):
        # Handle monadic operations (ceil, floor, round)
        self.next()
        result = None

        if mono_type == 'CLG':
            result = math.ceil(self.parse_expression())
        elif mono_type == 'FLR':
            result = math.floor(self.parse_expression())
        elif mono_type == 'RND':
            result = round(self.parse_expression())
        elif mono_type == 'LOG':
            result = math.log(self.parse_expression())
        elif mono_type == 'SIN':
            result = math.sin(self.parse_expression())
        elif mono_type == 'COS':
            result = math.cos(self.parse_expression())
        elif mono_type == 'TAN':
            result = math.tan(self.parse_expression())

        return result

    def parse_factor(self):
        # Parse variables, numbers, negation, parentheses, and monadic operations
        token = self.current_token
        if isinstance(token, Tokens.VarToken) and token.type == 'VAR':
            # Check for variable assignment and retrieve its value
            _ = self.get_variable_value(self.current_token.name)
            if _:
                try:
                    self.next()
                    return float(_) if '.' in str(_) else int(_)
                except:
                    return f'Variable "{self.current_token}" must be a number'
            else:
                return f'Variable "{self.current_token}"'

        elif isinstance(token, Tokens.Token) and token.type in ['INT', 'FLT']:
            # Parse integer and float literals
            self.next()
            return float(token.value) if '.' in token.value else int(token.value)

        elif isinstance(token, Tokens.Token) and token.type == 'NEG':
            # Parse negation
            self.next()
            return -self.parse_factor()
        # Parse parentheses
        elif isinstance(token, Tokens.Token) and token.type == 'L':
            self.next()
            result = self.parse_expression()
            if self.current_token and self.current_token.type != 'R':
                return 'Error: Mismatched parentheses'
            self.next()
            return result
        # Parse monadic operations
        elif isinstance(self.current_token, Tokens.MonoToken):
            mono_type = self.current_token.type
            return self.handle_mono_token(mono_type)
        # constants
        elif isinstance(token,Tokens.ConstantToken):
            if token.type in self.CONSTANTS:
                self.next()
                return self.CONSTANTS[token.type]

        else:
            return f"Error: Unexpected token: {token}"

    def show_equation(self):
        # Generate a string representation of the equation
        eq_str = ''
        for token in self.tokens:
            if isinstance(token, Tokens.Token):
                eq_str += str(token.value)
            elif isinstance(token, Tokens.MonoToken) and token.type == 'IS':
                eq_str += '='
            elif isinstance(token, Tokens.VarToken):
                eq_str += str(VARIABLES[token.name])
        return eq_str


def delete_variable(line):
    # Delete a variable from the global dictionary
    to_delete = line[3:].strip()
    if len(to_delete.strip()) > 0:
        if to_delete in VARIABLES:
            del VARIABLES[to_delete]
            print(f'variable "{to_delete}" removed')
        else:
            print(f'No variable found with name "{to_delete}"')
    else:
        print('No variable selected for deletion')

def main():
    run = True
    while run:
        line = input('> ')

        if line.upper() == 'EXIT':
            run = False
        elif line == '':
            continue
        # Display all variables in the dictionary
        elif line.strip() == 'VARDICT':
            print(VARIABLES)
        # Remove variable from the dictionary
        elif line.startswith('DEL'):
            delete_variable(line)
        else:
            lexer = Lexer(line)
            tokens = lexer.make_tokens()
            parser = Parser(tokens)
            result = parser.parse()
            print(parser.show_equation() if line.endswith('SHEQ') else result)

if __name__ == '__main__':
    main()
